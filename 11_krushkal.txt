import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

public class KruskalSimple {
    int V;
    List<Edge> edges = new ArrayList<>();

    KruskalSimple(int V) {
        this.V = V;
    }

    void addEdge(int src, int dest, int weight) {
        edges.add(new Edge(src, dest, weight));
    }

    int findParent(int[] parent, int v) {
        if (parent[v] != v) {
            parent[v] = findParent(parent, parent[v]);
        }
        return parent[v];
    }

    void union(int[] parent, int[] rank, int u, int v) {
        int rootU = findParent(parent, u);
        int rootV = findParent(parent, v);

        if (rank[rootU] < rank[rootV]) {
            parent[rootU] = rootV;
        } else if (rank[rootU] > rank[rootV]) {
            parent[rootV] = rootU;
        } else {
            parent[rootV] = rootU;
            rank[rootU]++;
        }
    }

    void kruskalMST() {
        Collections.sort(edges);

        int[] parent = new int[V];
        int[] rank = new int[V];
        for (int i = 0; i < V; i++) {
            parent[i] = i;
            rank[i] = 0;
        }

        System.out.println("Edge \tWeight");
        int edgeCount = 0;

        for (Edge edge : edges) {
            if (edgeCount == V - 1) break;

            int rootU = findParent(parent, edge.src);
            int rootV = findParent(parent, edge.dest);

            if (rootU != rootV) {
                System.out.println(edge.src + " - " + edge.dest + "\t" + edge.weight);
                union(parent, rank, rootU, rootV);
                edgeCount++;
            }
        }
    }

    public static void main(String[] args) {
        KruskalSimple graph = new KruskalSimple(4);

        graph.addEdge(0, 1, 10);
        graph.addEdge(0, 2, 6);
        graph.addEdge(0, 3, 5);
        graph.addEdge(1, 3, 15);
        graph.addEdge(2, 3, 4);

        graph.kruskalMST();
    }
}
