import java.util.Scanner;
 
public class LinkedListOperations5 {
 
    // Singly Linked List
    static class SinglyLinkedList {
        Node head;
 
        static class Node {
            int data;
            Node next;
 
            Node(int data) {
                this.data = data;
                this.next = null;
            }
        }
 
        // Add a new node at the end
        public void append(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
                return;
            }
            Node last = head;
            while (last.next != null) {
                last = last.next;
            }
            last.next = newNode;
        }
 
        // Print the list
        public void printList() {
            Node current = head;
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
            System.out.println();
        }
    }
 
    // Doubly Linked List
    static class DoublyLinkedList {
        Node head;
 
        static class Node {
            int data;
            Node next;
            Node prev;
 
            Node(int data) {
                this.data = data;
                this.next = null;
                this.prev = null;
            }
        }
 
        // Add a new node at the end
        public void append(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
                return;
            }
            Node last = head;
            while (last.next != null) {
                last = last.next;
            }
            last.next = newNode;
            newNode.prev = last;
        }
 
        // Print the list from the beginning
        public void printListForward() {
            Node current = head;
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
            System.out.println();
        }
 
        // Print the list from the end
        public void printListBackward() {
            Node current = head;
            while (current != null && current.next != null) {
                current = current.next;
            }
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.prev;
            }
            System.out.println();
        }
    }
 
    // Circular Linked List
    static class CircularLinkedList {
        Node head;
 
        static class Node {
            int data;
            Node next;
 
            Node(int data) {
                this.data = data;
                this.next = null;
            }
        }
 
        // Add a new node at the end
        public void append(int data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
                newNode.next = head;
                return;
            }
            Node last = head;
            while (last.next != head) {
                last = last.next;
            }
            last.next = newNode;
            newNode.next = head;
        }
 
        // Print the list
        public void printList() {
            if (head == null) return;
            Node current = head;
            do {
                System.out.print(current.data + " ");
                current = current.next;
            } while (current != head);
            System.out.println();
        }
    }
 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("C24111 AdityaShirsat");
        // Menu for the user to choose the type of linked list
        System.out.println("Choose the type of Linked List:");
        System.out.println("1. Singly Linked List");
        System.out.println("2. Doubly Linked List");
        System.out.println("3. Circular Linked List");
        int choice = sc.nextInt();
 
        System.out.println("Enter the number of nodes:");
        int n = sc.nextInt();
 
        if (choice == 1) {
            SinglyLinkedList singlyList = new SinglyLinkedList();
            for (int i = 0; i < n; i++) {
                System.out.println("Enter data for node " + (i + 1) + ":");
                int data = sc.nextInt();
                singlyList.append(data);
            }
            System.out.println("The Singly Linked List is:");
            singlyList.printList();
        } else if (choice == 2) {
            DoublyLinkedList doublyList = new DoublyLinkedList();
            for (int i = 0; i < n; i++) {
                System.out.println("Enter data for node " + (i + 1) + ":");
                int data = sc.nextInt();
                doublyList.append(data);
            }
            System.out.println("The Doubly Linked List (forward) is:");
            doublyList.printListForward();
            System.out.println("The Doubly Linked List (backward) is:");
            doublyList.printListBackward();
        } else if (choice == 3) {
            CircularLinkedList circularList = new CircularLinkedList();
            for (int i = 0; i < n; i++) {
                System.out.println("Enter data for node " + (i + 1) + ":");
                int data = sc.nextInt();
                circularList.append(data);
            }
            System.out.println("The Circular Linked List is:");
            circularList.printList();
        } else {
            System.out.println("Invalid choice.");
        }
    } }